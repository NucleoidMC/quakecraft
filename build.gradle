plugins {
	id 'fabric-loom' version '0.12.+'
	id 'io.github.juuxel.loom-quiltflower' version '1.6.+'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.0.0'
	id 'java-library'
	id 'maven-publish'
	id 'org.quiltmc.gradle.licenser' version '1.1.+'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

// This field defines the Java version your mod target.
def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	def mc = libs.versions.minecraft.get()
	return mc.matches('^\\d\\dw\\d\\d[a-z]$') || mc.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	def mc = libs.versions.minecraft.get()
	if (isMCVersionNonRelease()) {
		return mc
	}
	def version = mc.split('\\.')
	return version[0] + '.' + version[1]
}

loom {
	accessWidenerPath = file('src/main/resources/quakecraft.accesswidener')
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name 'Nucleoid'
		url 'https://maven.nucleoid.xyz/'
	}
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev/'
	}
}

configurations {
	shadow
	api.extendsFrom shadow
}

dependencies {
	minecraft libs.minecraft
	modImplementation libs.fabric.loader

	mappings(loom.layered {
		addLayer(quiltMappings.mappings(libs.minecraft.mappings.get().toString() + ":v2"))
	})

	// Fabric API.
	modImplementation libs.fabric.api

	// Plasmid.
	modImplementation libs.nucleoid.plasmid
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}
